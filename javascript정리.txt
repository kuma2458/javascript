document.write : 작성
console.log : 콘솔에 로그 기록
var : 변수 선언용, 다만 요새는 잘 안씀
let : var대신 최근에 많이 쓰는 변수선언
const : 자바의 final,상수 선언

타입까지 비교하고싶으면 관계연산자에 =를 하나 더씀

document.write로 쓴거에 p태그를 붙이고 싶으면
>> document.write("<p class='blue'>"+i+"</p>");

백틱을 이용한 태그 조립
>> let tag ='';
    tag+=`<p class=blue>${i}</p>`
    >> `<사용할태그>${넣을값}</사용할태그>`

prompt : 입력받기
>> prompt('메세지 내용','기본값')
typeof : 타입확인

--------------------
12월 8일
isNaN : 숫자가 아닌지 판별하는 함수. 숫자면 false, 아니면 true

값을 아예 안넝흐면 undefined라고 나옴
빈값넣을때는 null


date = 시간함수
new Date();

math.floor : 내림
math.ceil : 올림
math.round : 반올림
math.random : 난수
1~45 : math.floor(math.random()*45)+1

str

str.substr : substr(startidx,n) startidx부터 n개 추출
str.substring : substr(startidx,endidx) startidx부터 endidx 전까지 추출

alert = 경고창, 팝업
confirm : 확인용 팝업, 예 : true 아니오 : false 값 출력

history : 앞으로가기 뒤로가기
function forward(){
    history.forward();
}
<button onclick="forward();"> 앞으로 가기 </button>
 <button onclick="location.reload();">새로고침</button>

 location.reload() = 새로고침
 location.href = 해당 링크로 이동

 navigator.userAgent = 유저 접속 정보
 -------------------------------------
 12월 11일 

 javascript의 배열은 타입을 정하지않고 그냥 다 넣을 수 있음


find(e,i,arr) 
>>arr 에서 e 값을 찾는거
람다식이랑 fuction 있음
        result= arr.find((e,i,arr) => {
            console.log(e,i,arr)
                if(e<20){
                    document.write(`<p>값이 3.1415인 인덱스 번호 찾기 : ${arr.indexOf(31415)}</p>`);
                    return true;

                }
                return false;
        });
        
        //fuction 
        result= arr.find(function(e,i,arr) {
            console.log(e,i,arr)
                if(e<20){
                    document.write(`<p>값이 3.1415인 인덱스 번호 찾기 : ${arr.indexOf(31415)}</p>`);
                    return true;

                }
                return false;
        });




 slice = 그냥 잘라서 출력, 원본에 영향 x
 splice= 잘라서 출력, 자른값은 원본에서 삭제


 배열합치기
 1.concat
 >> 배열1.concat(합칠배열2)
 >> 괄호안에 여러개넣어도됨

2. for문 돌려서 push로 집어넣기

배열요소들을 하나로 합치기 = join('요소들 사이사이에 집어넣을 것')

특정문자를 기준으로 쪼개기 = split 

function 
매개변수에 값을 넣지않으면 -> undefined
return 할 값이 없는데 return하면 -> NaN
매개변수 쓸때 배열변수는 맨 마지막에 쓰기

익명함수 : 이름이 없는 함수, 변수에 담아서 사용, 이벤트 처리, 배열의 각 요소를 함수로 처리할때 사용
>>      let func = function(){
            console.log("익명 함수 실행");
        }
익명함수를 실행할떄는 그 익명함수를 담은 변수명() 으로 실행
익명함수를 사용할거면 어딘가에는 반드시 담아놔야함

화살표 함수 : ES6에서 추가된 함수, 함수를 간략하게 표현할 때 사용, 람다식과 비슷한 형태임
    let func2=() => {
        console.log("익명 함수 실행");
    }
    func2();

화살표 함수가 한줄일때는 무조건 해당 결과값을 리턴함
--------------------------------------------------
12월 12일

스프래드 연산자 : 배열같은 여러가지 데이터가 담겨있는 요소들을 한번에 출력하는 연산자(ex:배열,객체)
>> console.log(...배열이름)

합치는거도 쉬움
>>> arr3=(...arr1,...arr2)

객체생성
객체이름={
    객체요소 : 요소 값
    함수이름 : function(){
        함수내용
    }
}

객체 합치는거도 스프래드 연산자 사용할 수 있음
객체3={...객체1,...객체2};
ㄴ 단, 합치려는 객체들 중 함수 이름이 같은게 있다면 제일 뒤에오는 객체의 함수로 저장됨

map
ㄴ 자바스크립트에서 map은 배열의 각 요소를 변환해서 새로운 배열을 만듬
ㄴ 위 작업을 할때 기존 배열은 변경안함
ㄴ 배열 요소에 작업을 하고 다시 저장하고싶을때 map을 종종 씀


filter
ㄴ 배열 중에서 내가 원하는 데이터를 뽑고싶을때 사용


reduce
배열의 각 요소를 누적하여 하나의 값으로 만드어서 반환
기존의 배열 요소 변환 x
변수.reduce((acc,cur,idx) =>acc+cur,초기값);
ㄴacc=합산하여 저장하는 공간
ㄴcur=요소들 중 현재 값
ㄴidx =인덱스번호값


스크립트에서 body의 태그들을 선택하는 방법
스크립트에서 body태그 값들을 불러오고싶으면 body밑에 script작성

ㄴgetElementById('아이디값')
ㄴgetElementByTagName('태그')

태그.innerHTML : 태그 안의 값을 가져옴

attribute는 html 문서상에서 태그에 추가적인 정보, 옵션들을 사용할때 쓰는 요소
property는 동적으로 값을 변하게 해주는 요소들
예를 들면 라디오 버튼, 체크박스에서 checked를 넣으면 attribute로 시작할때 고정적으로 설정되는 요소임
그런데 내가 마우스로 클릭해서 체크가 되거나 풀릴 때 바뀌는 값이 property

쉽게말해 attribute는 정적인 시작할때 정해지는 값, property는 내가 원할때 바꿀수 있는 값
----------------------------------------
12월 13일
window.onload : 문서(body쪽)를 다 읽은 후에 실행됨
onclick : 마우스 이벤트

이벤트 발생 막고싶을떄
>> 매개변수.preventDefault();

화살표나 function 매개변수칸에 변수를 넣어서 메서드 실행가능

onmouseover,onmouseout 단점 : 해당 태그 내에 있어도 태그 내에 있는 다른 태그에 올라가면 out 판정이됨
이를 보완하기위한 함수 
>> onmouseenter, onmouseleave

this. 를 쓰고 싶으면 화살표말고 익명함수 function() 사용

열렸다 닫히는 느낌 나게 하는거 : transition = 1s all;

Height 종류

clientHeight : css 상의 길이값 + padding영역까지의 길이값
offsetHeight : css 상의 길이값 + padding영역 + 테두리(border) 길이값
scrollHeight : css 상의 길이값 + padding영역 + 테두리(border) 길이값
------------------------------
12월 14일
obj.nextElementSibling : 현재 태그의 다음 형제 요소
obj.previousElementSibling : 현재 태그의 이전 형제 요소

setInterval : 일정시간마다 반복실행함
>> setInterval(()=>{},반복시간텀)

querySelector.append(객체) : 객체를 뒤로 보내서 추가하기
 document.querySelector('.thumnail').prepend(li) : 객체를 앞으로 보내서 추가하기


 opacity : 투명도

 ------------------------------
 12월 18일

 ajax = 정보만 받아와서 새로고침하기, 페이지를 새로고침해서  새로만들지않음

 RequestInfo 


 let request= new XMLHttpRequest();
 >> 서버에서 데이터 받아온 결과값

request.currenttarget = request.send()로 받아온 결과값중 현재 내가 설정한 상황의 결과값
request.currenttarget.response =  내가 원하는 결과값

  request.addEventListener(이벤트이름,함수)

  자바쿼리
  development 랑 min 차이

  min - > minified : 최소화 버전(파일크기를 줄이기 위해 주석, 공백, 기타 문자들을 제거 한 버전
  )

  자바쿼리 기본 형태
  $(넣을 내용)

  jquery css 적용 형태
    $('p').css('style 태그 이름','적용할 설정')
  jquery value 값 가져오는법
  >> .val()
  css는 객체로 선언해서 한번에 다 적을수 잇음
  >>            $('#wrap>h1').css({'background-color':'yellow',
            'text-decoration':'underline'
            });
  자식 선택할때는 .children() 사용 가능
  다음 태그 선택할때에는 .next() 사용
  형 요소 선택은 .prev()
  동생, 형 요소 전부 다 선택시에는 .nextAll  / .prevAll
  나 빼고 전부 선택 
  >> .siblings()

  .nextUntil() / .prevUntil() 
  >> 선택자를 선언하지 않았으면 끝까지 적용시키지만, 선택자를 선언하면 해당 선택자 전까지만 적용시킴

  부모요소 선택자
  .parent()

  내 부모들 모두 선택
  >> .parents()

  자식들중 첫번쨰 , 마지막 요소 선택
  >> .first() / .last()

  무리(그룹) 별로 첫번째, 마지막 요소 선택
  >> $('선택자:first-of-type') / $('선택자:last-of-type')\

  인덱스 번호별로 짝수, 홀수
  >> :odd / :even

  :nth-child

  .eq(n) = n번째 인덱스 번호 선택

  :gt(n) = n보다 큰 요소들 선택
  :lt(n) = n보다 작은 요소들 선택
  :only-child = 형제 요소가 없는 것을 선택함

  n번째부터 m번째까지 구간 선택
  >> .slice(시작인덱스,끝인덱스)

  [] : 속성값 확인
  [a=b] : a속성이 b이면 해당됨
  [a^=b] : a속성의 시작값이 b이면 해당됨
  [a$=b] : a속성의 끝나는값이 b이면 해당됨
  [a*=b] : a속성에 b값이 들어가있으면 해당됨

  속성값 수정할때는
  .attr()
  checked나 readonly같은 선언만 하는 요소들 집어넣을떄는 true false 사용

  class나 attr 지우고싶을때 : removeClass() / removeAttr()

  prop : 현재 실행되고있는 요소의 동적인 속성값

  우리가 나중에 접근하는 속성들은 다 property

  toggleclass = on off 되는 형식